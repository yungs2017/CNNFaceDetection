name: "face24"

layer {
  name: "mtcnn_cls_only"
  type: "HDF5Data"
  hdf5_data_param {
     source: "train_h5.txt" # do not give the h5 files directly, but the list.
     batch_size: 128
   }
  top: "X"
  top: "y"
  top: "r"
  include {
    phase: TRAIN
  }
}
layer {
  name: "mtcnn_cls_only"
  type: "HDF5Data"
  hdf5_data_param {
     source: "val_h5.txt" # do not give the h5 files directly, but the list.
     batch_size: 128
   }
  top: "X"
  top: "y"
  top: "r"
  include {
    phase: TEST
  }
}


layer {
  name: "conv1"
  type: "Convolution"
  bottom: "X"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult : 1
  }
  param {
    lr_mult: 2
    decay_mult : 0
  }
  convolution_param {
    num_output: 10
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult : 1
  }
  param {
    lr_mult: 2
    decay_mult : 0
  }
  convolution_param {
    num_output: 16
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 3
  }
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
   param {
    lr_mult: 1
    decay_mult : 1
  }
  param {
    lr_mult: 2
    decay_mult : 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 3
    stride: 1
     weight_filler {
      type: "xavier"
    }
    bias_filler {
	  type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}






layer {
  name: "conv4-1"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4-1"
   param {
    lr_mult: 1
    decay_mult : 1
  }
  param {
    lr_mult: 2
    decay_mult : 0
  }
  convolution_param {
    num_output: 2
    kernel_size: 1
    stride: 1
     weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "drop5"
  type: "Dropout"
  bottom: "conv4-1"
  top: "conv4-1"
  dropout_param{
    dropout_ratio: 0.5
  }
}

layer {
  name: "conv4-2"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4-2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4
    kernel_size: 1
    stride: 1
     weight_filler {
      type: "xavier"
	}
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer{
	name : "cls_bridge"
	type : "Python"
	bottom : "conv4-1"
	bottom : "y"
	top : "cls-valid"
	top : "label-valid"
	python_param {
		module : "pythonLayer"
		layer : "bridge"
	}
}




layer {
  name: "cls_loss"
  type: "SoftmaxWithLoss"
  bottom: "cls-valid"
  bottom: "label-valid"
  top: "cls_loss"
  propagate_down:1
  propagate_down:0
  loss_weight: 1
}
layer {
  name: "cls_Acc"
  type: "Accuracy"
  bottom: "cls-valid"
  bottom: "label-valid"
  top: "cls_Acc"
}

layer {
  name: "roi_loss"
  type: "Python"
  bottom: "conv4-2"
  bottom: "r"
  top: "roi_loss"
  loss_weight: 0.5
  python_param {
    module: "pythonLayer"
    layer:  "regression_Layer"
  }
}
